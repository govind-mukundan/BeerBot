 
[Cosm Publishing Bug]
 Looks like Cosm has some cache problem with MQTT so the server needs to be updated twice with the same data.
 The fist message published will be the old data, while the second message will reflect the new data
 eg: mosquitto_pub -h api.cosm.com -u 8dlRt66vQY2YrpGuwOM97cC5rsSSAKxpL0RvaUtZYkFSYz0g -t /v2/feeds/82941/datastreams/0.csv -m "1358179168"
 
 [V1 vs V2 Cosm Feeds]
 V2 feeds contain the timestamp along with data
 V1 feeds only have the data, so its easiest to parse
 
 -> Immediately on subscribing to a feed, you get a message that should be ignored (?)
 -> But the new feed update needs to be sent twice, so effectively you have to ignore first 2 feed updates
 
[Approval ID]
 Approval ID = unix epoch time, if the approval ID is new, you can vend a blob
 
[Algo]
 1. Load data from EEPROM
 2. If SD card is available, and it has new data, update it in EEPROM and RAM. If not available skip this step.
 3. Connect to the WiFi based on latest EEPM data
 4. Connect to cosm
 5. Subscribe to feed
 6. Check ID to vend
 
[Status LEDs Truth Table]
 1. WiFi not connected, Internet not connected => WiFi LED Off, Internet LED Off
 2. WiFi connecting, Internet not connected => WiFi LED ON, Internet LED Off
 3. WiFi Connected, Internet connecting + Cosm subiscription Not OK => WiFi LED ON, Internet LED ON
 4. WiFi Connected, Internet connected + Cosm Subscription OK => WiFi LED ON, Internet LED Blinking
 
[Configuration of SSID/PWD]
 On SD card, format with FAT32 and create two files ssid.txt and pwd.txt
 In ssid.txt, store the ssid characters (no new line)
 In pwd.txt, store the pwd characters (no new line)
 
[WiFi Limitations]
 1. Currently supports only WEP networks.
 2. open networks, WPA (eg iphone hot spot) does not work, but can be added via configuration files.
  
[Memory Optimization]
 The strings are stored in RAM by default, to mode to ROM use the PROGMEM directive.
 PROGMEM usage -> dataType variableName[] PROGMEM = {};   // use this form
 
 prog_char      - a signed char (1 byte) -127 to 128
 prog_uchar     - an unsigned char (1 byte) 0 to 255
 prog_int16_t   - a signed int (2 bytes) -32,767 to 32,768
 prog_uint16_t  - an unsigned int (2 bytes) 0 to 65,535
 prog_int32_t   - a signed long (4 bytes) -2,147,483,648 to * 2,147,483,647.
 prog_uint32_t  - an unsigned long (4 bytes) 0 to 4,294,967,295
 
--> Update: The Arduino IDE provides a simple interface F("Your_String_Here") to store the string in ROM.
